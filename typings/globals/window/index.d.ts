// Generated by typings
// Source: typings/custom/window.d.ts
interface GearJson<T> {
    put(name:string,obj: T): void;
    get(name:string):T;
    toJson():{[idx:string]: T};

    fromStyle(val:string):GearJson<string>;

    fromString(val:string):GearJson<string>;

    toString():string;
    forEach(callback:((key:string,value:T) => void)):void;

    clear():void;

    new<T>(objs?: any): GearJson<T>;
}

declare var GearJson: GearJson<any>;

interface GearArray<T> {
    indexOf(ele: T): number;
    addAll(arr:Array<T>): void;
    toArray(): T[];
    get(index:number): T;
    add(obj:T): void;
    insert(obj:T,index:number): void;
    length():number;
    toString(split?:string):string;
    clone(deep?: boolean):GearArray<T>;
    contains(ele:T):boolean;
    remove(ele:T) : T;
    removeByIndex(ele?: number): T;
    up(ele:T|number): void;
    down(ele:T|number): void;
    new(arr?: Array<T>): GearArray<T>;
}

declare var GearArray: {
    new<T>(arr?: Array<T>): GearArray<T>;
    fromString(val: string,split:string): GearArray<string>|null;
};
interface RenderOptions {
    el?: string|Element;
    mounted?(...tags: any[]): void;
    components?: any;
}
interface Message {
    progress(type?: string): void;
    alert(title:string,message:string,...args: any[]): void;
    info(title:string,message:string,...args: any[]): void;
    warning(title:string,message:string,...args: any[]): void;
    success(title:string,message:string,...args: any[]): void;
    error(title:string,message:string,...args: any[]): void;
    modal: {
        alert(title:string,message:string,...args: any[]): void;
        info(title:string,message:string,...args: any[]): void;
        warning(title:string,message:string,...args: any[]): void;
        success(title:string,message:string,...args: any[]): void;
        error(title:string,message:string,...args: any[]): void;
    };
    simple: {
        alert(content:string,duration?:number,onClose?:Function): void;
        info(content:string,duration?:number,onClose?:Function): void;
        warning(content:string,duration?:number,onClose?:Function): void;
        error(content:string,duration?:number,onClose?:Function): void;
        success(content:string,duration?:number,onClose?:Function): void;
        loading(content:string,duration?:number,onClose?:Function): void;
    };
    confirm(args: any): void;
}
interface JqueryTag {
}

declare var G: {
    SockJs:any;
    G$: any;
    parsed: boolean;
    waitFuns: Array<Function>;
    registerCustomComponents():void;
    registerComponents(clazz:Function): void;
    $: (selector?:string|object|Function|null,html?: JqueryTag, react?: boolean)=>any;
    components: {};
    userComponents: {};
    doWaitFuns:()=>{};
    render:(renderOptions?:RenderOptions)=>{};
    cannotSetStateEvents: GearArray<string>;
    // voidParent: Element;
    tag: any;
    messager: Message;
    utils: any;
    dialog: any;
    cacheHtml: string;
    addUpdating: (id: Promise<boolean>) => Array<string>;
    removeUpdating: (id: Promise<boolean>) => Array<string>;
    isUpdating: () => boolean;
    http: any;
    util: any;
    vmdoms:{[key:string]: JqueryTag};
    root: any;
    // domEventTargets:Node[];
}
interface Events {
    onAbort: Function;
    onAfterChange: Function;
    onAfterCheck: Function;
    onAfterClose: Function;
    onAfterExpand: Function;
    onAfterLoad: Function;
    onAfterPrint: Function;
    onAfterProcess: Function;
    onAfterRemove: Function;
    onAfterRender: Function;
    onAfterSelect: Function;
    onAfterSubmit: Function;
    onAfterUpdate: Function;
    onBeforeCancel: Function;
    onBeforeCellSave: Function;
    onBeforeCellEdit: Function;
    onBeforeCellReset: Function;
    onBeforeChange: Function;
    onBeforeCheck: Function;
    onBeforeClear: Function;
    onBeforeCollapse: Function;
    onBeforeEdit: Function;
    onBeforeExpand: Function;
    onBeforeLoad: Function;
    onBeforePrint: Function;
    onBeforeProcess: Function;
    onBeforeReset: Function;
    onBeforeRemove: Function;
    onBeforeRowAdd: Function;
    onBeforeRowDown: Function;
    onBeforeRowEdit: Function;
    onBeforeRowDelete: Function;
    onBeforeRowReset: Function;
    onBeforeRowSave: Function;
    onBeforeRowUp: Function;
    onBeforeSave: Function;
    onBeforeSelect: Function;
    onBeforeSubmit: Function;
    onBeforeUnload: Function;
    onBeforeUpload: Function;
    onBlur: Function;
    onCancel: Function;
    onCanPlay: Function;
    onCanplayThrough: Function;
    onCellSave: Function;
    onChange: Function;
    onCheck: Function;
    onClear: Function;
    onClick: Function;
    onClickButton: Function;
    onClickIcon: Function;
    onClose: Function;
    onCollapse: Function;
    onCompassNeedScalibration: Function;
    onComplete: Function;
    onConfirm: Function;
    onContextMenu: Function;
    onCustomRequest: Function;
    onDateCellRender: Function;
    onDblClick: Function;
    onDeSelect: Function;
    onDeviceLight: Function;
    onDeviceMotion: Function;
    onDeviceOrientation: Function;
    onDisabledDate: Function;
    onDoValidate: Function;
    onDrag: Function;
    onDragEnd: Function;
    onDragEnter: Function;
    onDragLeave: Function;
    onDragOver: Function;
    onDragStart: Function;
    onDrop: Function;
    onDurationChange: Function;
    onEdit: Function;
    onEmptied: Function;
    onEnded: Function;
    onError: Function;
    onExpand: Function;
    onExpanded: Function;
    onExpandedRow: Function;
    onExpandedRowsChange: Function;
    onFailed: Function;
    onFocus: Function;
    onFormatter: Function;
    onHashChange: Function;
    onHidePanel: Function;
    onInput: Function;
    onInvalid: Function;
    onItemRender: Function;
    onKeyDown: Function;
    onKeyPress: Function;
    onKeyUp: Function;
    onLeftTreeCheck: Function;
    onLeftTreeMoved: Function;
    onLoad: Function;
    onLoadedData: Function;
    onLoadedMetaData: Function;
    onLoadFailed: Function;
    onLoadStart: Function;
    onLoadSuccess: Function;
    onLoadError: Function;
    onLogout: Function;
    onMatchFormat: Function;
    onMessage: Function;
    onMouseDown: Function;
    onMouseEnter: Function;
    onMouseLeave: Function;
    onMouseMove: Function;
    onMouseOut: Function;
    onMouseOver: Function;
    onMouseUp: Function;
    onMouseWheel: Function;
    onMsGestureChange: Function;
    onMsGestureDoubleTap: Function;
    onMsGestureEnd: Function;
    onMsGestureHold: Function;
    onMsGestureStart: Function;
    onMsGestureTap: Function;
    onMsInertiaStart: Function;
    onMsPointerCancel: Function;
    onMsPointerDown: Function;
    onMsPointerEnter: Function;
    onMsPointerLeave: Function;
    onMsPointerMove: Function;
    onMsPointerOut: Function;
    onMsPointerOver: Function;
    onMsPointerUp: Function;
    onNotification: Function;
    onOffLine: Function;
    onOk: Function;
    onOnline: Function;
    onOpen: Function;
    onOpenChange: Function;
    onOrientationChange: Function;
    onPageHide: Function;
    onPageShow: Function;
    onPageSizeChange: Function;
    onPanelChange: Function;
    onParser: Function;
    onPause: Function;
    onPlay: Function;
    onPlaying: Function;
    onPopState: Function;
    onPressEnter: Function;
    onPreview: Function;
    onProcess: Function;
    onProgress: Function;
    onRateChange: Function;
    onReadyStateChange: Function;
    onRemove: Function;
    onRender: Function;
    onReset: Function;
    onResize: Function;
    onRightClick: Function;
    onRightTreeMoved: Function;
    onRightTreeCheck: Function;
    onRowClick: Function;
    onRowDelete: Function;
    onRowSave: Function;
    onSave: Function;
    onScroll: Function;
    onSearch: Function;
    onSearchChange: Function;
    onSeeked: Function;
    onSeeking: Function;
    onSelect: Function;
    onSelectAll: Function;
    onSelectChange: Function;
    onShowPanel: Function;
    onShowSizeChange: Function;
    onStalled: Function;
    onStorage: Function;
    onSubmit: Function;
    onSubmitFailed: Function;
    onSubmitSuccess: Function;
    onSuccess: Function;
    onSuspend: Function;
    onTabChange: Function;
    onTimeUpdate: Function;
    onTitleClick: Function;
    onTouchCancel: Function;
    onTouchEnd: Function;
    onTouchMove: Function;
    onTouchStart: Function;
    onUnload: Function;
    onUnselect: Function;
    onValidate: Function;
    onVolumeChange: Function;
    onWaiting: Function;
    onWarn: Function;
    keys: GearArray<string>;
    cannotSetState: GearArray<string>;
    // _events: any;
}
interface Window extends EventTarget, WindowTimers, WindowSessionStorage, WindowLocalStorage, WindowConsole, GlobalEventHandlers, IDBEnvironment, WindowBase64, GlobalFetch, WindowOrWorkerGlobalScope, WindowEventHandlers {
    Blob: typeof Blob;
    URL: typeof URL;
    URLSearchParams: typeof URLSearchParams;
    readonly applicationCache: ApplicationCache;
    readonly caches: CacheStorage;
    readonly clientInformation: Navigator;
    readonly closed: boolean;
    readonly crypto: Crypto;
    customElements: CustomElementRegistry;
    defaultStatus: string;
    readonly devicePixelRatio: number;
    readonly doNotTrack: string;
    readonly document: Document;
    /** @deprecated */
    readonly event: Event | undefined;
    /** @deprecated */
    readonly external: External;
    readonly frameElement: Element;
    readonly frames: Window;
    readonly history: History;
    readonly innerHeight: number;
    readonly innerWidth: number;
    readonly isSecureContext: boolean;
    readonly length: number;
    location: Location;
    readonly locationbar: BarProp;
    readonly menubar: BarProp;
    readonly msContentScript: ExtensionScriptApis;
    name: string;
    readonly navigator: Navigator;
    offscreenBuffering: string | boolean;
    oncompassneedscalibration: ((this: Window, ev: Event) => any) | null;
    ondevicelight: ((this: Window, ev: DeviceLightEvent) => any) | null;
    ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;
    ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
    onmousewheel: ((this: Window, ev: Event) => any) | null;
    onmsgesturechange: ((this: Window, ev: Event) => any) | null;
    onmsgesturedoubletap: ((this: Window, ev: Event) => any) | null;
    onmsgestureend: ((this: Window, ev: Event) => any) | null;
    onmsgesturehold: ((this: Window, ev: Event) => any) | null;
    onmsgesturestart: ((this: Window, ev: Event) => any) | null;
    onmsgesturetap: ((this: Window, ev: Event) => any) | null;
    onmsinertiastart: ((this: Window, ev: Event) => any) | null;
    onmspointercancel: ((this: Window, ev: Event) => any) | null;
    onmspointerdown: ((this: Window, ev: Event) => any) | null;
    onmspointerenter: ((this: Window, ev: Event) => any) | null;
    onmspointerleave: ((this: Window, ev: Event) => any) | null;
    onmspointermove: ((this: Window, ev: Event) => any) | null;
    onmspointerout: ((this: Window, ev: Event) => any) | null;
    onmspointerover: ((this: Window, ev: Event) => any) | null;
    onmspointerup: ((this: Window, ev: Event) => any) | null;
    /** @deprecated */
    onorientationchange: ((this: Window, ev: Event) => any) | null;
    onreadystatechange: ((this: Window, ev: ProgressEvent) => any) | null;
    onvrdisplayactivate: ((this: Window, ev: Event) => any) | null;
    onvrdisplayblur: ((this: Window, ev: Event) => any) | null;
    onvrdisplayconnect: ((this: Window, ev: Event) => any) | null;
    onvrdisplaydeactivate: ((this: Window, ev: Event) => any) | null;
    onvrdisplaydisconnect: ((this: Window, ev: Event) => any) | null;
    onvrdisplayfocus: ((this: Window, ev: Event) => any) | null;
    onvrdisplaypointerrestricted: ((this: Window, ev: Event) => any) | null;
    onvrdisplaypointerunrestricted: ((this: Window, ev: Event) => any) | null;
    onvrdisplaypresentchange: ((this: Window, ev: Event) => any) | null;
    opener: any;
    /** @deprecated */
    readonly orientation: string | number;
    readonly outerHeight: number;
    readonly outerWidth: number;
    readonly pageXOffset: number;
    readonly pageYOffset: number;
    readonly parent: Window;
    readonly performance: Performance;
    readonly personalbar: BarProp;
    readonly screen: Screen;
    readonly screenLeft: number;
    readonly screenTop: number;
    readonly screenX: number;
    readonly screenY: number;
    readonly scrollX: number;
    readonly scrollY: number;
    readonly scrollbars: BarProp;
    readonly self: Window;
    readonly speechSynthesis: SpeechSynthesis;
    status: string;
    readonly statusbar: BarProp;
    readonly styleMedia: StyleMedia;
    readonly toolbar: BarProp;
    readonly top: Window;
    readonly window: Window;
    alert(message?: any): void;
    blur(): void;
    cancelAnimationFrame(handle: number): void;
    /** @deprecated */
    captureEvents(): void;
    close(): void;
    confirm(message?: string): boolean;
    departFocus(navigationReason: NavigationReason, origin: FocusNavigationOrigin): void;
    focus(): void;
    getComputedStyle(elt: Element, pseudoElt?: string | null): CSSStyleDeclaration;
    getMatchedCSSRules(elt: Element, pseudoElt?: string | null): CSSRuleList;
    getSelection(): Selection | null;
    matchMedia(query: string): MediaQueryList;
    moveBy(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    msWriteProfilerMark(profilerMarkName: string): void;
    open(url?: string, target?: string, features?: string, replace?: boolean): Window | null;
    postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void;
    print(): void;
    prompt(message?: string, _default?: string): string | null;
    /** @deprecated */
    releaseEvents(): void;
    requestAnimationFrame(callback: FrameRequestCallback): number;
    resizeBy(x: number, y: number): void;
    resizeTo(x: number, y: number): void;
    scroll(options?: ScrollToOptions): void;
    scroll(x: number, y: number): void;
    scrollBy(options?: ScrollToOptions): void;
    scrollBy(x: number, y: number): void;
    scrollTo(options?: ScrollToOptions): void;
    scrollTo(x: number, y: number): void;
    stop(): void;
    webkitCancelAnimationFrame(handle: number): void;
    webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;
    webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;
    webkitRequestAnimationFrame(callback: FrameRequestCallback): number;
    addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    G: typeof G;
    GearType: GearType;
    GearArray: GearArray<any>;
    GearJson: GearJson<any>;
    WXEnvironment: any;
    Constants: Constants;
    _dialog: any;
    possibleStandardTypes: {[idx:string]: string};
    getPossibleStandardType: (propName: string) => string;
    possibleStandardNames: {[idx:string]: string};
    getPossibleStandardName: (propName: string) => string;
    possibleStandardTagNames: {[idx:string]: string};
    getPossibleStandardTagName: (propName: string) => string;
    _p_root: string;
    _p_filterPath: string;
    Events: Events;
}
declare var window: Window;
